{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": "AutoMart",
    "description": "This is a server for AutoMart application.  You can find out more from  [Automart](https://github.com/Dkabiswa/AutoMart)",
    "license": {
      "name": "ISC",
      "url": "https://github.com/Dkabiswa/AutoMart/blob/develop/LICENSE"
    },
    "contact": {
      "email": "kabiswad@gmail.com"
    }
  },
  "basePath": "/api/v1",
  "tags": [{
      "name": "Users",
      "description": "Everything about USERS"
    },
    {
      "name": "Cars",
      "description": "Operations on CARS"
    },
    {
      "name": "Orders",
      "description": "Operations on ORDERS"
    }
  ],
  "schemes": [
    "https",
    "http"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/auth/signup": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User SignUp",
        "description": "Create a new user",
        "parameters": [{
          "name": "users",
          "in": "body",
          "description": "User to be created",
          "schema": {
            "$ref": "#/definitions/signup"
          }
        }],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "success: User successfully created"
          },
          "400": {
            "description": "Error: invalid input"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/auth/signin": {
      "post": {
        "tags": [
          "Users"
        ],
        "summary": "User login",
        "description": "User with an account can login",
        "parameters": [{
          "name": "users",
          "in": "body",
          "description": "User to be logged In",
          "schema": {
            "$ref": "#/definitions/signin"
          }
        }],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "success: successfully loged in"
          },
          "400": {
            "description": "Error: invalid input"
          },
          "404": {
            "description": "Error: User already exists"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/car": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Create a new car sale ad",
        "description": "User(seller) can create a new car advert",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token",
            "required": false

          },
          {
            "name": "cars",
            "in": "body",
            "description": "Car Ad to be created",
            "schema": {
              "$ref": "#/definitions/carAd"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "success: Car sucessfully added"
          },
          "400": {
            "description": "Error: invalid value"
          },
          "401": {
            "description": "Error: unAuthorized"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View cars according to specified otions",
        "description": "Admin can view all cars and User can view all unsold cars with the option of available cars within given price range",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "TAuthorization user token",
            "required": true

          },
          {
            "name": "status",
            "in": "query",
            "description": " Car Status",
            "required": false,
            "type": "string"
          },
          {
            "name": "minPrice",
            "in": "query",
            "description": " minimum price",
            "required": false,
            "type": "integer"
          },
          {
            "name": "maxPrice",
            "in": "query",
            "description": " maximum price",
            "required": false,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: Successfully retrieve a cars"
          },
          "400": {
            "description": "Error: invalid input"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "403": {
            "description": "Admin only"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/car/{id}": {
      "get": {
        "tags": [
          "Cars"
        ],
        "summary": "View a specific car",
        "description": "User can view a specific car",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token",
            "required": true

          },
          {
            "name": "id",
            "in": "path",
            "description": " Car Id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: Successfully retrieve a car"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "404": {
            "description": "Error: Car not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Upload multiple images to a specific car",
        "description": "User can upload multiple images to a specific car",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true

          },
          {
            "name": "image",
            "in": "formData",
            "description": "images",
            "required": true,
            "schema": {
              "$ref": "#/definitions/images"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: Successfully uploaded images"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "400": {
            "description": "Error: invalid input"
          },
          "500": {
            "description": "Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Cars"
        ],
        "summary": "Delete a specific car",
        "description": "Admin can delete a specific car",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true

          },
          {
            "name": "id",
            "in": "path",
            "description": " Car Id",
            "required": true,
            "type": "integer"
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: Ad Successfully deleted"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "403": {
            "description": "Error: Only Admin is allowed"
          },
          "404": {
            "description": "Error: Car not found"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/car/{id}/status": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "mark a posted car ad as sold",
        "description": "seller can mark a posted ad as sold",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "Authorization token",
            "required": true

          },
          {
            "name": "id",
            "in": "path",
            "description": "car id",
            "required": true,
            "type": "integer"

          },
          {
            "name": "status",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/markSold"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: car succesfully marked as sold"
          },
          "400": {
            "description": "Error: invalid value"
          },
          "404": {
            "description": "Error: car not found"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/car/{id}/price": {
      "patch": {
        "tags": [
          "Cars"
        ],
        "summary": "Update the price of posted car Ad",
        "produces": [
          "application/json"
        ],
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true

          },
          {
            "name": "id",
            "in": "path",
            "description": "car id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "new status of car posted",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updatePrice"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "success: Successfully car price updated"
          },
          "404": {
            "description": "Error: Car not found"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/car/flag": {
      "post": {
        "tags": [
          "Cars"
        ],
        "summary": "Report a car",
        "description": "User can bflag a car fradulent",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": false

          },
          {
            "name": "Report a car",
            "in": "body",
            "description": "Report a car as fraud",
            "schema": {
              "$ref": "#/definitions/flag"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "success: Order created Successfully"
          },
          "400": {
            "description": "Error: invalid value"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/order": {
      "post": {
        "tags": [
          "Orders"
        ],
        "summary": "Create new order",
        "description": "Buyer can make purchase order",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true

          },
          {
            "name": "purchase order",
            "in": "body",
            "description": "Details of a purchase order",
            "schema": {
              "$ref": "#/definitions/order"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "201": {
            "description": "success: Order created Successfully"
          },
          "400": {
            "description": "Error: invalid value"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    },
    "/order/{id}/price": {
      "patch": {
        "tags": [
          "Orders"
        ],
        "summary": "update the price of purchase order",
        "description": "Buyer can update the price of purchase order",
        "parameters": [{
            "name": "Authorization",
            "in": "header",
            "description": "The user token",
            "required": true

          },
          {
            "name": "id",
            "in": "path",
            "description": "order id",
            "required": true,
            "type": "integer"
          },
          {
            "name": "new price offered",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/updateOrder"
            }
          }
        ],
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "success: Order price is sucessfully updated"
          },
          "400": {
            "description": "Error: invalid value"
          },
          "404": {
            "description": "Error: order not found"
          },
          "401": {
            "description": "Error: Authentication failed"
          },
          "500": {
            "description": "Server Error"
          }
        }
      }
    }
  },


  "definitions": {
    "signup": {
      "required": [
        "email",
        "firstName",
        "lastName",
        "password",
        "address",
        "isAdmin"
      ],
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "password": {
          "type": "string"
        },
        "address": {
          "type": "string"
        },
        "isAdmin": {
          "type": "boolean",
          "default": false
        }
      }
    },
    "signin": {
      "required": [
        "email",
        "password"
      ],
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "password": {
          "type": "string"
        }
      }
    },
    "carAd": {
      "required": [
        "owner",
        "state",
        "price",
        "manufacture",
        "model",
        "bodyType"
      ],
      "type": "object",
      "properties": {
        "owner": {
          "type": "integer"
        },
        "state": {
          "type": "string"
        },
        "price": {
          "type": "number",
          "format": "float"
        },
        "manufacture": {
          "type": "string"
        },
        "model": {
          "type": "string"
        },
        "bodyType": {
          "type": "string"
        }
      }
    },
    "order": {
      "required": [
        "buyer",
        "carId",
        "amount"
      ],
      "type": "object",
      "properties": {
        "buyer": {
          "type": "integer"
        },
        "carId": {
          "type": "integer"
        },
        "amount": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "flag": {
      "required": [
        "carId",
        "reason",
        "description"
      ],
      "type": "object",
      "properties": {
        "carId": {
          "type": "integer"
        },
        "reason": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "updateOrder": {
      "required": [
        "newAmount"
      ],
      "properties": {
        "newAmount": {
          "type": "number",
          "format": "float"
        }
      }
    },
    "markSold": {
      "required": [
        "status"
      ],
      "properties": {
        "status": {
          "type": "string"
        }
      }
    },
    "images": {
      "type": "object",
      "properties": {
        "images": {
          "type": "array",
          "image": {
            "type": "string",
            "format": "binary"
          }
        }
      },
      "updatePrice": {
        "required": [
          "price"
        ],
        "properties": {
          "price": {
            "type": "number",
            "format": "float"
          }
        }
      }
    }
  }
}